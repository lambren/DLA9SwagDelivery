{"version":3,"sources":["assets/AmazonLogo.jpg","recoil/atoms.js","Styles.js","components/ScanPage/WelcomeMessage.js","Constants.js","components/ScanPage/ScanInput.js","components/ScanPage/ScanPage.js","components/ConfirmPage/Order.js","components/ConfirmPage/OrdersList.js","recoil/selectors.js","components/ConfirmPage/FinalMessage.js","components/ConfirmPage/BadgeScan.js","components/ConfirmPage/ConfirmPage.js","App.js","reportWebVitals.js","index.js"],"names":["routeState","atom","key","default","orderState","useStyles","makeStyles","headerRoot","fontWeight","color","padding","borderBottom","paperRoot","textInputRoot","margin","minWidth","borderRadius","border","leftTextAlign","textAlign","position","themeBackgroud","backgroundColor","loadingOverlay","zIndex","width","successBackground","errorBackground","WelcomeMessage","props","classes","Grid","container","justify","align","root","direction","Typography","variant","HOSTNAME","ScanInput","enqueueSnackbar","useSnackbar","useState","qrcode","setqrcode","loading","setLoading","setRoute","useSetRecoilState","setOrders","inputRef","createRef","useEffect","current","focus","onSubmit","e","a","resetState","preventDefault","fetch","method","headers","body","JSON","stringify","res","json","data","status","CircularProgress","ref","value","onChange","target","placeholder","className","ScanPage","Container","Paper","Order","order","item","alignItems","Box","hidden","xs","swag_name","quantity","OrdersList","orders","useRecoilValue","spacing","map","cart_id","cartState","selector","get","FinalMessage","success","BadgeScan","user_id","setUser_id","finished","setFinished","setSuccess","resetRoute","useResetRecoilState","resetOrders","carts","then","catch","finally","setTimeout","ConfirmPage","App","route","chooseRoute","src","AmazonLogo","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac12c9c5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/AmazonLogo.838dfb68.jpg\";","import { atom } from 'recoil'\r\n\r\nconst routeState = atom({\r\n    key: 'routeState',\r\n    default: 'SCAN_PAGE',\r\n});\r\n\r\nconst orderState = atom({\r\n    key: 'orderState',\r\n    default: [],\r\n});\r\n\r\n\r\nexport { routeState, orderState } ","import { makeStyles } from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles({\r\n    headerRoot: {\r\n      fontWeight: 'bold',\r\n      color: 'rgb(28, 167, 226)',\r\n      padding:'0.5em',\r\n      borderBottom: 'solid rgb(196, 196, 196) 1px'\r\n    },\r\n    paperRoot: {\r\n      padding: '2em',\r\n      \r\n    },\r\n    textInputRoot: {\r\n      margin: '2em',\r\n      minWidth: '300px',\r\n      padding: '1em',\r\n      borderRadius: '3px',\r\n      border: 'solid 1px rgb(196, 196, 196)'\r\n    },\r\n    leftTextAlign: {\r\n      textAlign: 'left',\r\n      padding: '0.5em',\r\n      position: 'relative'\r\n    },\r\n    themeBackgroud: {\r\n      backgroundColor: 'rgb(28, 167, 226)',\r\n    },\r\n    loadingOverlay: {\r\n      backgroundColor: 'rgba(255,255,255,0.8)',\r\n      zIndex: '10000',\r\n      position: 'absolute',\r\n      width: '100%'\r\n    },\r\n    successBackground: {\r\n      backgroundColor: \"#5cffc0\",\r\n      color: \"#1fab65\",\r\n      padding: '2em'\r\n    },\r\n    errorBackground: {\r\n      backgroundColor: '#ffa6a6',\r\n      color: '#bd0b0b',\r\n      padding: '2em'\r\n    }\r\n})\r\n\r\nexport default useStyles;","import React from 'react'\r\nimport {  Grid, Typography } from '@material-ui/core';\r\nimport useStyles from './../../Styles'\r\n\r\n\r\nconst WelcomeMessage = (props) => {\r\n    const classes = useStyles();\r\n    return(\r\n        <Grid container \r\n        justify='flex-start' \r\n        align='flex-start' \r\n        classes={{root: classes.leftTextAlign}}\r\n        direction='column'>\r\n        <Typography variant='body1'\r\n          color='textSecondary'>\r\n            Welcome to DLA9 $WAG Store Last Mile App\r\n        </Typography>\r\n\r\n        <Typography variant='body1'\r\n          color='textSecondary'>\r\n            This App is used for confirming and marking orders as 'DELIVERED'\r\n        </Typography>\r\n\r\n        <Typography variant='body1'\r\n          color='textSecondary'>\r\n            It will also put a timestamp as a proof of delivery\r\n        </Typography>\r\n\r\n        <Typography variant='body1'\r\n          color='textSecondary'>\r\n            If you are getting network issues, please open a new tab\r\n        </Typography>\r\n\r\n        <Typography variant='body1'\r\n          color='textSecondary'>\r\n            Type '1.1.1.1' into the address bar, and hit enter \r\n        </Typography>\r\n\r\n        <Typography variant='body1'\r\n          color='textSecondary'>\r\n            You will be taken to the Amazon network sign-in page\r\n        </Typography>\r\n\r\n        <Typography variant='body1'\r\n          color='textSecondary'>\r\n            Once you have signed-in to the network, come back to this page\r\n        </Typography>\r\n      </Grid>\r\n    )\r\n}\r\n\r\nexport default WelcomeMessage;","const HOSTNAME = 'https://tranquil-meadow-63605.herokuapp.com/';\r\nexport { HOSTNAME }","import React, { createRef, useEffect, useState } from 'react';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport useStyles from './../../Styles';\r\nimport { HOSTNAME } from './../../Constants';\r\nimport { useSetRecoilState } from 'recoil';\r\nimport { routeState, orderState } from './../../recoil/atoms'\r\nimport { useSnackbar} from 'notistack'  \r\n\r\nconst ScanInput = (props) => {\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const [qrcode, setqrcode] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const setRoute = useSetRecoilState(routeState);\r\n    const setOrders = useSetRecoilState(orderState);\r\n\r\n    const inputRef = createRef();\r\n\r\n    useEffect(() => {\r\n        if (inputRef.current) inputRef.current.focus();\r\n    })\r\n\r\n    const classes = useStyles();\r\n    \r\n    const onSubmit = async (e) => {\r\n        const resetState = () => {\r\n            setqrcode('');\r\n            setLoading(false);\r\n        }\r\n\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        try {\r\n            const res = await fetch(HOSTNAME + 'get-carts-by-qr/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type' : 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    qrcode\r\n                })\r\n            });\r\n            const data = await res.json();\r\n            if (data.status === 'SUCCESS') {\r\n                setOrders(data.data);\r\n                setRoute('CONFIRM_PAGE');\r\n            }\r\n            else {\r\n                enqueueSnackbar('No orders found', {\r\n                    variant: 'error'\r\n                })\r\n                resetState();\r\n            }\r\n        } catch (e) {\r\n            enqueueSnackbar('Network Error. Please Sign-in to amzn-internet Wifi', {\r\n                variant: 'error'\r\n            })\r\n            resetState();\r\n        }   \r\n    }\r\n\r\n    const chooseDisplay = () => {\r\n        if (!loading) \r\n            return(\r\n                <form onSubmit={onSubmit}>\r\n                    <input\r\n                        ref={inputRef}\r\n                        value={qrcode}\r\n                        onChange={e => setqrcode(e.target.value)}\r\n                        placeholder='Scan Order To Begin'\r\n                        className={classes.textInputRoot}>\r\n                    </input>\r\n                </form>\r\n            ); \r\n        else return (<CircularProgress/>)\r\n    }\r\n\r\n    return(   \r\n        <div>\r\n            {chooseDisplay()} \r\n        </div>        \r\n    )\r\n}\r\n\r\nexport default ScanInput;","import React from 'react'\r\nimport { Container, Paper, Typography } from '@material-ui/core';\r\nimport useStyles from './../../Styles'\r\nimport WelcomeMessage from './WelcomeMessage';\r\nimport ScanInput from './ScanInput';\r\n\r\nconst ScanPage = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (      \r\n    <Container>\r\n        <Paper classes={{root: classes.paperRoot}}>\r\n            <Typography \r\n              variant='h4'\r\n              color='primary'\r\n              classes={{\r\n                root: classes.headerRoot,\r\n              }}>\r\n              DLA9 $WAG Store Last Mile\r\n            </Typography>\r\n            <WelcomeMessage/>\r\n            <ScanInput/>\r\n          </Paper>\r\n    </Container>)\r\n}\r\n\r\nexport default ScanPage;","import { Box,  CircularProgress, Grid, Typography } from '@material-ui/core'\r\nimport React from 'react'\r\nimport useStyles from './../../Styles'\r\n\r\nconst Order = (props) => {\r\n    const classes = useStyles();\r\n    const { order } = props;\r\n    return (\r\n        <Grid item container alignItems='center'>\r\n            <Box hidden={true} \r\n                className={classes.loadingOverlay}>\r\n                <Grid item container\r\n                    justify='center' align='center'>\r\n                    <CircularProgress></CircularProgress>\r\n                </Grid>\r\n            </Box>\r\n        \r\n            <Grid item xs={8}>\r\n                <Typography variant='body1'>\r\n                    {order.swag_name}\r\n                </Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={2}>\r\n                <Typography variant='body1'>\r\n                    x {order.quantity}\r\n                </Typography>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Order;","import { Grid, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { orderState } from  './../../recoil/atoms'\r\nimport {useRecoilValue} from 'recoil'\r\nimport Order from './Order';\r\nimport useStyles from './../../Styles'\r\n\r\nconst OrdersList = (props) => {\r\n    const classes = useStyles();\r\n    const orders = useRecoilValue(orderState);\r\n\r\n    return (\r\n        <Grid container spacing={2}\r\n            className={classes.leftTextAlign}>\r\n            <Grid item container alignItems='center'>\r\n                <Grid item xs={8}>\r\n                    <Typography variant='h6'>\r\n                        Item\r\n                    </Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={2}>\r\n                    <Typography variant='h6'>\r\n                        Qty\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n        {\r\n            orders.map(item => \r\n                <Order key={item.cart_id}\r\n                    order={item}>\r\n                </Order>)    \r\n        }\r\n        </Grid>\r\n    )\r\n\r\n}\r\n\r\nexport default OrdersList;","import { selector } from 'recoil'\r\nimport { orderState} from './atoms'\r\n\r\nconst cartState = selector({\r\n    key: 'cartState',\r\n    get: ({get}) => {\r\n        const orders = get(orderState)\r\n\r\n        return (orders.map(item => item.cart_id));\r\n    }\r\n})\r\n\r\nexport {cartState}","import { Paper, Typography } from '@material-ui/core';\r\nimport React from 'react'\r\nimport useStyles from './../../Styles';\r\n\r\nconst FinalMessage = (props) => {\r\n    const classes = useStyles();\r\n    const { success } = props;\r\n    return (<div> {\r\n            (success) ? \r\n            <div>\r\n                <Paper className={classes.successBackground}>\r\n                    <Typography variant='h5' color='inherit'>Successfully Delivered Orders!</Typography>\r\n                </Paper>\r\n            </div> \r\n            :\r\n            <div>\r\n                <Paper className={classes.errorBackground}>\r\n                    <Typography variant='h5' color='inherit'>Failed To Deliver Orders. Please check the Associates' Order and Login!</Typography>\r\n                </Paper>\r\n            </div>\r\n        }\r\n        </div>)\r\n}\r\n\r\nexport default FinalMessage;","import { CircularProgress } from '@material-ui/core'\r\nimport React, { useState, useEffect, createRef } from 'react'\r\nimport useStyles from './../../Styles'\r\nimport { useRecoilValue, useResetRecoilState } from 'recoil'\r\nimport { orderState, routeState } from './../../recoil/atoms'\r\nimport { cartState } from './../../recoil/selectors'\r\nimport { HOSTNAME } from './../../Constants'\r\nimport FinalMessage from './FinalMessage'\r\n\r\nconst BadgeScan = (props) => {\r\n    const classes = useStyles();\r\n\r\n    const inputRef = createRef();\r\n\r\n    useEffect(() => {\r\n        if (inputRef.current) inputRef.current.focus();\r\n    })\r\n\r\n    const [user_id, setUser_id] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [finished, setFinished] = useState(false);\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    const resetRoute = useResetRecoilState(routeState);\r\n    const resetOrders = useResetRecoilState(orderState);\r\n\r\n    const carts = useRecoilValue(cartState);\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'deliver-orders/', {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Content-Type\":\"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                user_id, carts\r\n            })\r\n        }).then(res => res.json())\r\n        .then(data => {\r\n            if (data.status === 'SUCCESS')\r\n                setSuccess(true);\r\n            else setSuccess(false);\r\n        }).catch(e => {\r\n            setSuccess(false);\r\n        }).finally(() => {\r\n            setLoading(false);\r\n            setFinished(true);\r\n            setTimeout(() => {\r\n                resetRoute();\r\n                resetOrders();\r\n            }, 5000)\r\n        });\r\n    }\r\n\r\n    const chooseDisplay = () => {\r\n        if (loading) return (<CircularProgress/>)\r\n        else if (finished) {\r\n            return(<FinalMessage success={success}/>)\r\n        } else return (\r\n            <form onSubmit={onSubmit}>\r\n                <input\r\n                    ref={inputRef}\r\n                    value = {user_id}\r\n                    onChange={(e) => setUser_id(e.target.value)}\r\n                    className={classes.textInputRoot}\r\n                    placeholder='Scan Badge To Confirm Delivery'\r\n                    >\r\n                </input>\r\n            </form>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div> {\r\n            chooseDisplay()\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BadgeScan;","import { Container, Paper, Typography } from '@material-ui/core';\r\nimport useStyles from './../../Styles'\r\nimport React from 'react'\r\nimport OrdersList from './OrdersList';\r\nimport BadgeScan from './BadgeScan';\r\n\r\nconst ConfirmPage = (props) => {\r\n    const classes = useStyles();\r\n    return (<Container>\r\n        <Paper classes={{\r\n            root: classes.paperRoot\r\n            }}>\r\n            <Typography \r\n              variant='h4'\r\n              color='primary'\r\n              classes={{\r\n                root: classes.headerRoot,\r\n              }}>\r\n              Confirm Orders\r\n            </Typography>\r\n            <OrdersList/>\r\n            <BadgeScan/>\r\n\r\n        </Paper>\r\n    </Container>)\r\n}\r\n\r\nexport default ConfirmPage;","\nimport './App.css';\nimport AmazonLogo from './assets/AmazonLogo.jpg'\n\nimport { routeState } from './recoil/atoms'\nimport { useRecoilValue } from 'recoil'\nimport ScanPage from './components/ScanPage/ScanPage';\nimport ConfirmPage from './components/ConfirmPage/ConfirmPage';\n\nfunction App() {\n\n  const route = useRecoilValue(routeState);\n\n  const chooseRoute = () => {\n    switch(route) {\n      case 'CONFIRM_PAGE':\n        return(<ConfirmPage/>);\n      default:\n        return(<ScanPage/>);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {chooseRoute()}\n      <img src={AmazonLogo} alt=''/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { RecoilRoot } from 'recoil'\nimport { SnackbarProvider } from 'notistack'\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <SnackbarProvider>\n        <App />\n      </SnackbarProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}